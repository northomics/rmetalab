df_sparsity_dec$sparsity <- factor(df_sparsity_dec$sparsity, levels = df_sparsity_dec$sparsity)
df_sparsity_dec
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
df_sparsity <- as.data.frame(table(sparsity))
df_sparsity <- df_sparsity[order(df_sparsity$sparsity,decreasing = TRUE),]
df_sparsity$sparsity <- factor(df_sparsity$sparsity, levels = df_sparsity$sparsity)
df_sparsity
d
ryan set 1
1 = ryan
ryan =1
ryan_age=9
zhibin_age=39
zhibin_age-ryan_age
df_sparsity$sparsity
df_sparsity
df_intensity_Q100 <- df_intensity[which(rowSums(df_intensity > 0) == ncol(df_intensity)) , , drop = FALSE]
View(df_intensity_Q100)
as.data.frame(1:10)
library(rmetalab)
library(rmetalab)
vector <- c(rnorm(4),rnorm(4)+4)
factor <- as.factor(rep(LETTERS[1:2], each = 4))
Anova_1_PostHoc(vector, factor,p_anova = 0.05, p_ttest = 0.05)
vector
factor
Anova_1_PostHoc(vector, factor,p_anova = 0.05, p_ttest = 0.05)
attach(airquality)
Month <- factor(Month, labels = month.abb[5:9])
Month
result<-pairwise.t.test(Ozone, Month, p.adj = "fdr")
result
Anova_1_PostHoc(Ozone,Month,p_anova = 0.05, p_ttest = 0.05)
Ozone
library(rmetalab)
library(rmetalab)
library(rmetalab)
library(rmetalab)
tidy_proteinGroup_table <- function(proteinGroup_table){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroup_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroup_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",proteinGroup_table[,grep( "contaminant", colnames(proteinGroup_table))]) # note that + is a special character
index_reverse <- grep("\\+", proteinGroup_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroup_table <- proteinGroup_table[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(proteinGroup_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroup_table[,grep("LFQ.intensity ", colnames(proteinGroup_table))]
colnames(intensity_columns)<-gsub("LFQ.intensity.", "", colnames(intensity_columns))
}else{ # otherwise take out intensity column， even only one column
intensity_columns <-   proteinGroup_table[,grep("Intensity.", colnames(proteinGroup_table)),drop =  FALSE]
colnames(intensity_columns)<-gsub("Intensity.", "", colnames(intensity_columns))
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroup_table$"Unique peptides",
"score" = proteinGroup_table$Score,
"protein_primary_ids" =protein_primary_ids
))
}
#'  file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  protein_table <- rio::import(file_path, header = TRUE,check.names = TRUE, stringsAsFactors = FALSE) #
#'  file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  protein_table <- rio::import(file_path, header = TRUE,check.names = TRUE, stringsAsFactors = FALSE) #
#'  t <- tidy_protein_table(protein_table)
dim(t$intensity_matrix)
t
protein_table
file_path
file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
file_path
library(rmetalab)
proteinGroups.txt
file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
file_path
path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  prote
protein_table
protein_table <- rio::import(file_path, header = TRUE,check.names = TRUE, stringsAsFactors = FALSE) #
tidy_proteinGroup_table
t <- tidy_protein_table(protein_table)
tidy_protein_table <- function(proteinGroup_table){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroup_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroup_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",proteinGroup_table[,grep( "contaminant", colnames(proteinGroup_table))]) # note that + is a special character
index_reverse <- grep("\\+", proteinGroup_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroup_table <- proteinGroup_table[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(proteinGroup_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroup_table[,grep("LFQ.intensity ", colnames(proteinGroup_table))]
colnames(intensity_columns)<-gsub("LFQ.intensity.", "", colnames(intensity_columns))
}else{ # otherwise take out intensity column， even only one column
intensity_columns <-   proteinGroup_table[,grep("Intensity.", colnames(proteinGroup_table)),drop =  FALSE]
colnames(intensity_columns)<-gsub("Intensity.", "", colnames(intensity_columns))
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroup_table$"Unique peptides",
"score" = proteinGroup_table$Score,
"protein_primary_ids" =protein_primary_ids
))
}
t <- tidy_protein_table(protein_table)
t
t$intensity_matrix
t$n_contaminant
t$n_reversed
t$n_unique_peptides
t$score
t$protein_primary_ids
tidy_protein_table <- function(proteinGroup_table){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroup_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroup_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",proteinGroup_table[,grep( "contaminant", colnames(proteinGroup_table))]) # note that + is a special character
index_reverse <- grep("\\+", proteinGroup_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroup_table <- proteinGroup_table[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(proteinGroup_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
intensity_columns <- proteinGroup_table[,grep("LFQ.intensity ", colnames(proteinGroup_table))]
colnames(intensity_columns)<-gsub("LFQ.intensity.", "", colnames(intensity_columns))
}else{ # otherwise take out intensity column， even only one column
intensity_columns <-   proteinGroup_table[,grep("Intensity.", colnames(proteinGroup_table)),drop =  FALSE]
colnames(intensity_columns)<-gsub("Intensity.", "", colnames(intensity_columns))
}
return(list("intensity_matrix" = intensity_columns,
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroup_table$Unique.peptides,
"score" = proteinGroup_table$Score,
"protein_primary_ids" =protein_primary_ids
))
}
t <- tidy_protein_table(protein_table)
t$n_unique_peptides
tidy_protein_table <- function(proteinGroup_table){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(proteinGroup_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(proteinGroup_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",proteinGroup_table[,grep( "contaminant", colnames(proteinGroup_table))]) # note that + is a special character
index_reverse <- grep("\\+", proteinGroup_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
proteinGroup_table <- proteinGroup_table[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(proteinGroup_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
df_intensity <- proteinGroup_table[,grep("LFQ.intensity ", colnames(proteinGroup_table))]
colnames(df_intensity)<-gsub("LFQ.intensity.", "", colnames(df_intensity))
}else{ # otherwise take out intensity column， even only one column
df_intensity <-   proteinGroup_table[,grep("Intensity.", colnames(proteinGroup_table)),drop =  FALSE]
colnames(df_intensity)<-gsub("Intensity.", "", colnames(df_intensity))
}
# remove rows without any quantification value
df_intensity <- df_intensity[-which(rowSums(df_intensity > 0) == 0),,drop = FALSE]
df_intensity_Q100 <- df_intensity[which(rowSums(df_intensity > 0) == ncol(df_intensity)) , , drop = FALSE]
df_intensity_Q50 <- df_intensity[which(rowSums(df_intensity > 0) >= ncol(df_intensity))*0.5 , , drop = FALSE]
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
df_sparsity <- as.data.frame(table(sparsity))
df_sparsity <- df_sparsity[order(df_sparsity$sparsity,decreasing = TRUE),]
df_sparsity$sparsity <- factor(df_sparsity$sparsity, levels = df_sparsity$sparsity)
return(list("intensity_matrix" = df_intensity,
"intensity_matrix_Q100" = df_intensity_Q100,
"intensity_matrix_Q50" = df_intensity_Q50,
"experiment" = colnames(df_intensity),
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = proteinGroup_table$Unique.peptides,
"score" = proteinGroup_table$Score,
"sparsity" = df_sparsity,
"protein_primary_ids" =protein_primary_ids))
}
t <- tidy_protein_table(protein_table)
t$sparsity
t$intensity_matrix
dim(t$intensity_matrix)
dim(t$intensity_matrix_Q100)
dim(t$intensity_matrix_Q50)
dim(df_intensity)
tidy_protein_table <- function(protein_table){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(protein_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(protein_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",protein_table[,grep( "contaminant", colnames(protein_table))]) # note that + is a special character
index_reverse <- grep("\\+", protein_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
protein_table <- protein_table[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(protein_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
df_intensity <- protein_table[,grep("LFQ.intensity ", colnames(protein_table))]
colnames(df_intensity)<-gsub("LFQ.intensity.", "", colnames(df_intensity))
}else{ # otherwise take out intensity column， even only one column
df_intensity <-   protein_table[,grep("Intensity.", colnames(protein_table)),drop =  FALSE]
colnames(df_intensity)<-gsub("Intensity.", "", colnames(df_intensity))
}
# remove rows without any quantification value
df_intensity <- df_intensity[-which(rowSums(df_intensity > 0) == 0),,drop = FALSE]
df_intensity_Q100 <- df_intensity[which(rowSums(df_intensity > 0) == ncol(df_intensity)) , , drop = FALSE]
df_intensity_Q50 <- df_intensity[which(rowSums(df_intensity > 0) >= ncol(df_intensity))*0.5 , , drop = FALSE]
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
df_sparsity <- as.data.frame(table(sparsity))
df_sparsity <- df_sparsity[order(df_sparsity$sparsity,decreasing = TRUE),]
df_sparsity$sparsity <- factor(df_sparsity$sparsity, levels = df_sparsity$sparsity)
return(list("intensity_matrix" = df_intensity,
"intensity_matrix_Q100" = df_intensity_Q100,
"intensity_matrix_Q50" = df_intensity_Q50,
"experiment" = colnames(df_intensity),
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = protein_table$Unique.peptides,
"score" = protein_table$Score,
"sparsity" = df_sparsity,
"protein_primary_ids" =protein_primary_ids))
}
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(protein_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
#rownames(protein_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",protein_table[,grep( "contaminant", colnames(protein_table))]) # note that + is a special character
index_reverse <- grep("\\+", protein_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
protein_table <- protein_table[-index_to_remove,] # filtered table
protein_primary_ids <- protein_primary_ids[-index_to_remove] # filtered ids
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extra the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(protein_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
df_intensity <- protein_table[,grep("LFQ.intensity ", colnames(protein_table))]
colnames(df_intensity)<-gsub("LFQ.intensity.", "", colnames(df_intensity))
}else{ # otherwise take out intensity column， even only one column
df_intensity <-   protein_table[,grep("Intensity.", colnames(protein_table)),drop =  FALSE]
colnames(df_intensity)<-gsub("Intensity.", "", colnames(df_intensity))
}
# remove rows without any quantification value
df_intensity <- df_intensity[-which(rowSums(df_intensity > 0) == 0),,drop = FALSE]
df_intensity_Q100 <- df_intensity[which(rowSums(df_intensity > 0) == ncol(df_intensity)) , , drop = FALSE]
df_intensity_Q50 <- df_intensity[which(rowSums(df_intensity > 0) >= ncol(df_intensity))*0.5 , , drop = FALSE]
dim(df_intensity)
ncol(df_intensity)
which(rowSums(df_intensity > 0) == ncol(df_intensity))
df_intensity_Q100 <- df_intensity[which(rowSums(df_intensity > 0) == ncol(df_intensity)) , , drop = FALSE]
dim(df_intensity_Q100)
dim(df_intensity)
df_intensity_Q50 <- df_intensity[which(rowSums(df_intensity > 0) >= ncol(df_intensity))*0.5 , , drop = FALSE]
dim(df_intensity_Q50)
ncol(df_intensity))*0.5
df_intensity_Q50 <- df_intensity[which(rowSums(df_intensity > 0) >= ncol(df_intensity)*0.5) , , drop = FALSE]
dim(df_intensity_Q50)
library(rmetalab)
library(rmetalab)
head(protein_table)
colnames(protein_table)
tidy_protein_table <- function(protein_table){
# extract the primary protein ID,
protein.ids_split <- strsplit(as.vector(protein_table$"Protein.IDs"), ";| ") # this is a list of list of split names ; for maxquant result, space( ) for Kai's open-search result
protein_primary_ids <- unlist(lapply(protein.ids_split, function(x) x[1])) # only keep the first one
rownames(protein_table) <- protein_primary_ids # rename the rownames of the matrix
# do the row wise filtering
index_contaminant <- grep("\\+",protein_table[,grep( "contaminant", colnames(protein_table))]) # note that + is a special character
index_reverse <- grep("\\+", protein_table$Reverse)
index_to_remove <- c(index_contaminant,index_reverse)
if(length(index_to_remove) >0){
protein_table <- protein_table[-index_to_remove,] # filtered table
}
n_contaminant <- length(index_contaminant)
n_reversed <- length(index_reverse)
# extract the intensity column matrix
if(any(grepl("LFQ.intensity ", colnames(protein_table)))){ # if there are LFQ intensity columns, take out the LFQ columns
df_intensity <- protein_table[,grep("LFQ.intensity ", colnames(protein_table))]
colnames(df_intensity)<-gsub("LFQ.intensity.", "", colnames(df_intensity))
}else{ # otherwise take out intensity column， even only one column
df_intensity <-   protein_table[,grep("Intensity.", colnames(protein_table)),drop =  FALSE]
colnames(df_intensity)<-gsub("Intensity.", "", colnames(df_intensity))
}
# remove rows without any quantification value
df_intensity <- df_intensity[-which(rowSums(df_intensity > 0) == 0),,drop = FALSE]
df_intensity_Q100 <- df_intensity[which(rowSums(df_intensity > 0) == ncol(df_intensity)) , , drop = FALSE]
df_intensity_Q50 <- df_intensity[which(rowSums(df_intensity > 0) >= ncol(df_intensity)*0.5) , , drop = FALSE]
sparsity <- rowSums(df_intensity > 0) # here sparsity is number of present values
df_sparsity <- as.data.frame(table(sparsity))
df_sparsity <- df_sparsity[order(df_sparsity$sparsity,decreasing = TRUE),]
df_sparsity$sparsity <- factor(df_sparsity$sparsity, levels = df_sparsity$sparsity)
return(list("intensity_matrix" = df_intensity,
"intensity_matrix_Q100" = df_intensity_Q100,
"intensity_matrix_Q50" = df_intensity_Q50,
"experiment" = colnames(df_intensity),
"n_contaminant" = n_contaminant,
"n_reversed" = n_reversed,
"n_unique_peptides" = protein_table$Unique.peptides,
"score" = protein_table$Score,
"sparsity" = df_sparsity
))
}
e_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  pro
file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
file_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'
ath <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  protein_table <- rio::import(file_path, header = TRUE,check.names = TRUE, stringsAsFactors = FALSE) #
#'  t <- t
<- tidy_protein_table(protein_table)
t <- tidy_protein_table(protein_table)
t
t$intensity_matrix_Q50
View(t <- tidy_protein_table(protein_table))
View(t$intensity_matrix_Q50)
library(rmetalab)
t$intensity_matrix_Q50
t$intensity_matrix_Q50[1,1]
class(t$intensity_matrix_Q50[1,1])
class(t$intensity_matrix_Q100[1,1])
t$intensity_matrix[1,1]
t$intensity_matrix_Q100[1,1]
View(protein_table)
e_path <- system.file("extdata","proteinGroups.txt", package = "rmetalab")
#'  pro
protein_table$Intensity.RapidAIMV42_1_CYC
protein_table_1 <- read.delim(file_path, header = TRUE,check.names = TRUE, stringsAsFactors = FALSE)
protein_table_1$Intensity.RapidAIMV42_1_CYC
?protein_table <- rio::import(file_path, header = TRUE,check.names = TRUE, stringsAsFactors = FALSE)
?import
library(rio)
?import
do.call("complex", list(imag = 1:3))
tmp <- expand.grid(letters[1:2], 1:3, c("+", "-"))
tmp
do.call("paste", c(tmp, sep = ""))
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
do.call(paste, list(as.name("A"), as.name("B")), quote = TRUE)
A <- 2
f <- function(x) print(x^2)
A
f
env <- new.env()
assign("A", 10, envir = env)
assign("f", f, envir = env)
f <- function(x) print(x)
f
f(A)
do.call("f", list(A))
do.call("f", list(A), envir = env)
do.call("paste", c(tmp, sep = ""))
do.call(paste, c(tmp, sep = ""))
do.call(sum, list(c(1,2,4,1,2), na.rm = TRUE))
lapply(c(1,2,4,1,2), function(x) x + 1)
L=list(c(1,2,3), c(4,5,6))
L
do.call(sum, L)
df2
df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10))
library(lib64)
library(bit64)
df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10))
df
as.matrix(df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10)))
as.matrix(df)
as.matrix(do.call(cbind,df)
)
as.matrix(do.call(cbind,df))
library(bit64)
df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10))
as.matrix(df)
as.matrix(do.call(cbind,df))
library(rmetalab)
as.matrix(do.call(cbind,df))
as.numeric(as.matrix(do.call(cbind,df)))
as.matrix(as.numeric(do.call(cbind,df)))
mode(df)
class(df)
typeof(df)
storage.mode(df)
as.matrix(do.call(cbind,df)) ->m
m
class(m)
class(m) <- numeric()
mode(m)
type(m)
typeof(m)
storage.mode(m)
as.integer(m)
do.call(as.numeric,m
)
do.call(as.numeric,m)
do.call(as.numeric,df)
df
do.call(as.integer(),df)
do.call(as.integer,df)
do.call(cbind,df)
class(m) <- "numeric"
m
class(m) <- "character"
m
as.matrix(do.call(cbind,df)) ->m
t<-m
class(t) <- "character"
t
t
m
t<-m
m[1,1]
as.numeric(t[1,1])
t
as.numeric(t)
storage.mode(t) <- "numeric"
t
t
sapply(t, as.numeric)
apply(t, 2, as.numeric)
m
t
as.integer.integer64(df)
t
df
df
as.integer.integer64(t)
as.integer.integer64(m)
df
df+1
t
t+1
log(t)
m
m<-log(t)
m[1,1]
t
t+1
t+0.01
t*0.01
t*0.1
t^2
t
class(t)
log(t)
?exp
log(exp(3))
exp(log(10))
exp(log(3))
exp(log(t))
df
exp(log(df))
exp(log(df)) ->tt
tt[1]
df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10))
df
df <- log(exp(df))
library(rmetalab)
library(rmetalab)
library(rmetalab)
df
df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10))
df
df[1,1] <-0
df2 <- log(exp(df))
df2
df2
df2df <- data.frame(x=as.integer64(1:5), y=as.integer64(6:10))
df
exp(log(df))
log(0)
exp(log(0))
library(rmetalab)
dim(extract_species_gg)
extract_species_gg <- melt(data = data_table[data_table$Rank == 'Species', -c(2:10)],
id.vars = c("Name"), variable.name = "Sample", value.name = "Intensity")
extract_species_gg <- reshape2:: melt(data = data_table[data_table$Rank == 'Species', -c(2:10)],
id.vars = c("Name"), variable.name = "Sample", value.name = "Intensity")
grep(colnames(data_table), "Intensity")
remove.packages("rlang", lib="~/R/win-library/4.0")
